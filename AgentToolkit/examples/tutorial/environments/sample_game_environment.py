from datetime import datetime
from typing import Dict, Tuple

from greenlands_client.model.location import Location

from examples.tutorial.environments import action_space
from agent_toolkit import GameEnvironment


class SampleGameEnvironment(GameEnvironment):
    """Example game environment.

    This class is designed to show a very simple way in which the Greenlands
    GameEnvironment class can be extended. For each received action:
        1. Updates its game state calling the appropriate modifier method.
        2. Emits the events notifying the change.

    More complex GameEnvironment subclasses will have different action spaces and
    override one or both steps listed above.
    """

    @property
    def agent_location(self):
        return self.game_state.player_states[self.role_id].location

    @property
    def registered_appliers(self):
        return {
            action_space.NoAction: lambda _: None,
            action_space.MoveAction: self._player_move_action,
            action_space.ChatAction: self._player_chat_action,
            action_space.TurnChangeAction: self._player_turn_change_action,
            action_space.LeaveGameAction: self._player_leave_game_action,
            action_space.BlockPlaceAction: self._block_place_action,
            action_space.BlockRemoveAction: self._block_remove_action,
        }

    def is_agent_turn(self):
        return self.game_state.active_role_id == self.role_id

    def step(self, action: action_space.Action) -> Tuple[Dict, float, bool, Dict]:
        """
        Run one single step of the environment's dynamics.
        Accepts the action we want to apply to the environment and returns a boolean
        telling us whether the current turn of the agent is done.

        Returns tuple: (obs, reward, done, info)
        """
        self.registered_appliers[action.__class__](action)

        # agent wants to end turn, so that's what we take as "turn done"
        turn_done = isinstance(action, action_space.TurnChangeAction)

        return self.to_observation_space(), 0, turn_done, {}

    def _player_move_action(self, action: action_space.MoveAction) -> None:
        # Example of how the action space generated by the model can be
        # different from the events sent by to the MCPlugin.
        new_location = Location(
            x=float(action.x),
            y=float(action.y),
            z=float(action.z),
            pitch=float(action.pitch),
            yaw=float(action.yaw)
        )
        self.game_state.player_move(self.role_id, new_location)
        self.callback_provider.player_move(new_location)

    def _player_chat_action(self, action: action_space.ChatAction) -> None:
        utc_iso_datetime = datetime.utcnow().isoformat() + 'Z'
        self.game_state.player_chat(self.role_id, action.message, utc_iso_datetime)
        self.callback_provider.player_chat(
            action.message,
            self.game_state.get_player_location(self.role_id))

    def _player_leave_game_action(self, _action: action_space.LeaveGameAction) -> None:
        self.callback_provider.player_leave()

    def _block_place_action(self, action: action_space.BlockPlaceAction) -> None:
        block_location = Location(float(action.x), float(action.y), float(action.z), 0., 0.)
        self.game_state.block_place_by_location(block_location, action.block_material_id)
        self.callback_provider.block_place(
            action.block_material_id,
            block_location,
            self.game_state.get_player_location(self.role_id))

    def _block_remove_action(self, action: action_space.BlockRemoveAction) -> None:
        block_location = Location(float(action.x), float(action.y), float(action.z), 0., 0.)
        self.game_state.block_remove_by_location(block_location)
        self.callback_provider.block_remove(
            block_location,
            self.game_state.get_player_location(self.role_id))

    def _player_turn_change_action(self, _action: action_space.TurnChangeAction) -> None:
        # For TurnChangeEvents sent by the agent, we do not have the knowledge about the next role.
        self.callback_provider.turn_change(self.game_state.get_player_location(self.role_id))
